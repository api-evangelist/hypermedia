{"tools":[{"id":"125","name":"Fortune.js","summary":"Hello nerds. Fortune is a framework for prototyping hypermedia APIs that implement the JSON API specification. It comes with a modular persistence layer, with adapters for NeDB (built-in), MongoDB, MySQL, Postgres, &amp; SQLite. See guide for how to use.","details":"Hello nerds. Fortune is a framework for prototyping hypermedia APIs that implement the JSON API specification. It comes with a modular persistence layer, with adapters for NeDB (built-in), MongoDB, MySQL, Postgres, &amp; SQLite. See guide for how to use.","website":"http:\/\/fortunejs.com\/","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/fortune-js-logo-2.png","tags":"Hypermedia"},{"id":"126","name":"HAL Browser","summary":"An API browser for the hal+json media type.HAL is a simple format that gives a consistent and easy way to hyperlink between resources in your API. Adopting HAL will make your API explorable, and its documentation easily disocverable from within the API itself.","details":"An API browser for the hal+json media type.HAL is a simple format that gives a consistent and easy way to hyperlink between resources in your API. Adopting HAL will make your API explorable, and its documentation easily disocverable from within the API itself.","website":"https:\/\/github.com\/mikekelly\/hal-browser","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/hal-info-model.png","tags":"Hypermedia"},{"id":"127","name":"Roar","summary":"Roar is a framework for parsing and rendering REST documents. Representers let you define your API document structure and semantics. They allow both rendering representations from your modelsandparsing documents to update your Ruby objects. The bi-directional nature of representers make them interesting for both server and client usage. Roar comes with built-in JSON, JSON-HAL and XML support. Its ","details":"Roar is a framework for parsing and rendering REST documents. Representers let you define your API document structure and semantics. They allow both rendering representations from your modelsandparsing documents to update your Ruby objects. The bi-directional nature of representers make them interesting for both server and client usage. Roar comes with built-in JSON, JSON-HAL and XML support. Its highly modulare architecture provides features like coercion, hypermedia, HTTP transport, client caching and more.","website":"https:\/\/github.com\/apotonick\/roar","logo":"http:\/\/kinlane-productions.s3.amazonaws.com\/api-evangelist-site\/blog\/bw-github.jpg","tags":"Hypermedia"}],"published":"07\/02\/2014"}